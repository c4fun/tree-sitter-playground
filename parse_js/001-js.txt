program (0, 0) (72, 0)
  comment (0, 0) (0, 27)
  lexical_declaration (1, 0) (1, 35)
    let (1, 0) (1, 3)
    variable_declarator (1, 4) (1, 34)
      identifier (1, 4) (1, 11)
      = (1, 12) (1, 13)
      string (1, 14) (1, 34)
        ' (1, 14) (1, 15)
        string_fragment (1, 15) (1, 33)
        ' (1, 33) (1, 34)
    ; (1, 34) (1, 35)
  lexical_declaration (2, 0) (2, 16)
    const (2, 0) (2, 5)
    variable_declarator (2, 6) (2, 15)
      identifier (2, 6) (2, 8)
      = (2, 9) (2, 10)
      number (2, 11) (2, 15)
    ; (2, 15) (2, 16)
  variable_declaration (3, 0) (3, 23)
    var (3, 0) (3, 3)
    variable_declarator (3, 4) (3, 22)
      identifier (3, 4) (3, 15)
      = (3, 16) (3, 17)
      true (3, 18) (3, 22)
    ; (3, 22) (3, 23)
  expression_statement (4, 0) (4, 29)
    assignment_expression (4, 0) (4, 28)
      identifier (4, 0) (4, 11)
      = (4, 12) (4, 13)
      string (4, 14) (4, 28)
        ' (4, 14) (4, 15)
        string_fragment (4, 15) (4, 27)
        ' (4, 27) (4, 28)
    ; (4, 28) (4, 29)
  comment (6, 0) (6, 12)
  function_declaration (7, 0) (9, 1)
    function (7, 0) (7, 8)
    identifier (7, 9) (7, 14)
    formal_parameters (7, 14) (7, 20)
      ( (7, 14) (7, 15)
      identifier (7, 15) (7, 19)
      ) (7, 19) (7, 20)
    statement_block (7, 21) (9, 1)
      { (7, 21) (7, 22)
      return_statement (8, 4) (8, 29)
        return (8, 4) (8, 10)
        template_string (8, 11) (8, 28)
          ` (8, 11) (8, 12)
          string_fragment (8, 12) (8, 19)
          template_substitution (8, 19) (8, 26)
            ${ (8, 19) (8, 21)
            identifier (8, 21) (8, 25)
            } (8, 25) (8, 26)
          string_fragment (8, 26) (8, 27)
          ` (8, 27) (8, 28)
        ; (8, 28) (8, 29)
      } (9, 0) (9, 1)
  comment (11, 0) (11, 17)
  lexical_declaration (12, 0) (12, 28)
    const (12, 0) (12, 5)
    variable_declarator (12, 6) (12, 27)
      identifier (12, 6) (12, 9)
      = (12, 10) (12, 11)
      arrow_function (12, 12) (12, 27)
        formal_parameters (12, 12) (12, 18)
          ( (12, 12) (12, 13)
          identifier (12, 13) (12, 14)
          , (12, 14) (12, 15)
          identifier (12, 16) (12, 17)
          ) (12, 17) (12, 18)
        => (12, 19) (12, 21)
        binary_expression (12, 22) (12, 27)
          identifier (12, 22) (12, 23)
          + (12, 24) (12, 25)
          identifier (12, 26) (12, 27)
    ; (12, 27) (12, 28)
  comment (14, 0) (14, 21)
  if_statement (15, 0) (19, 1)
    if (15, 0) (15, 2)
    parenthesized_expression (15, 3) (15, 37)
      ( (15, 3) (15, 4)
      binary_expression (15, 4) (15, 36)
        identifier (15, 4) (15, 11)
        === (15, 12) (15, 15)
        string (15, 16) (15, 36)
          ' (15, 16) (15, 17)
          string_fragment (15, 17) (15, 35)
          ' (15, 35) (15, 36)
      ) (15, 36) (15, 37)
    statement_block (15, 38) (17, 1)
      { (15, 38) (15, 39)
      expression_statement (16, 4) (16, 45)
        call_expression (16, 4) (16, 44)
          member_expression (16, 4) (16, 15)
            identifier (16, 4) (16, 11)
            . (16, 11) (16, 12)
            property_identifier (16, 12) (16, 15)
          arguments (16, 15) (16, 44)
            ( (16, 15) (16, 16)
            string (16, 16) (16, 43)
              ' (16, 16) (16, 17)
              string_fragment (16, 17) (16, 42)
              ' (16, 42) (16, 43)
            ) (16, 43) (16, 44)
        ; (16, 44) (16, 45)
      } (17, 0) (17, 1)
    else_clause (17, 2) (19, 1)
      else (17, 2) (17, 6)
      statement_block (17, 7) (19, 1)
        { (17, 7) (17, 8)
        expression_statement (18, 4) (18, 27)
          call_expression (18, 4) (18, 26)
            member_expression (18, 4) (18, 17)
              identifier (18, 4) (18, 11)
              . (18, 11) (18, 12)
              property_identifier (18, 12) (18, 17)
            arguments (18, 17) (18, 26)
              ( (18, 17) (18, 18)
              string (18, 18) (18, 25)
                ' (18, 18) (18, 19)
                string_fragment (18, 19) (18, 24)
                ' (18, 24) (18, 25)
              ) (18, 25) (18, 26)
          ; (18, 26) (18, 27)
        } (19, 0) (19, 1)
  comment (21, 0) (21, 7)
  for_statement (22, 0) (24, 1)
    for (22, 0) (22, 3)
    ( (22, 4) (22, 5)
    lexical_declaration (22, 5) (22, 15)
      let (22, 5) (22, 8)
      variable_declarator (22, 9) (22, 14)
        identifier (22, 9) (22, 10)
        = (22, 11) (22, 12)
        number (22, 13) (22, 14)
      ; (22, 14) (22, 15)
    expression_statement (22, 16) (22, 22)
      binary_expression (22, 16) (22, 21)
        identifier (22, 16) (22, 17)
        < (22, 18) (22, 19)
        number (22, 20) (22, 21)
      ; (22, 21) (22, 22)
    update_expression (22, 23) (22, 26)
      identifier (22, 23) (22, 24)
      ++ (22, 24) (22, 26)
    ) (22, 26) (22, 27)
    statement_block (22, 28) (24, 1)
      { (22, 28) (22, 29)
      expression_statement (23, 4) (23, 40)
        call_expression (23, 4) (23, 39)
          member_expression (23, 4) (23, 15)
            identifier (23, 4) (23, 11)
            . (23, 11) (23, 12)
            property_identifier (23, 12) (23, 15)
          arguments (23, 15) (23, 39)
            ( (23, 15) (23, 16)
            template_string (23, 16) (23, 38)
              ` (23, 16) (23, 17)
              string_fragment (23, 17) (23, 33)
              template_substitution (23, 33) (23, 37)
                ${ (23, 33) (23, 35)
                identifier (23, 35) (23, 36)
                } (23, 36) (23, 37)
              ` (23, 37) (23, 38)
            ) (23, 38) (23, 39)
        ; (23, 39) (23, 40)
      } (24, 0) (24, 1)
  comment (26, 0) (26, 21)
  lexical_declaration (27, 0) (30, 2)
    const (27, 0) (27, 5)
    variable_declarator (27, 6) (30, 1)
      identifier (27, 6) (27, 12)
      = (27, 13) (27, 14)
      object (27, 15) (30, 1)
        { (27, 15) (27, 16)
        pair (28, 4) (28, 16)
          property_identifier (28, 4) (28, 8)
          : (28, 8) (28, 9)
          string (28, 10) (28, 16)
            ' (28, 10) (28, 11)
            string_fragment (28, 11) (28, 15)
            ' (28, 15) (28, 16)
        , (28, 16) (28, 17)
        pair (29, 4) (29, 11)
          property_identifier (29, 4) (29, 7)
          : (29, 7) (29, 8)
          number (29, 9) (29, 11)
        } (30, 0) (30, 1)
    ; (30, 1) (30, 2)
  lexical_declaration (32, 0) (32, 48)
    const (32, 0) (32, 5)
    variable_declarator (32, 6) (32, 47)
      identifier (32, 6) (32, 13)
      = (32, 14) (32, 15)
      array (32, 16) (32, 47)
        [ (32, 16) (32, 17)
        string (32, 17) (32, 26)
          ' (32, 17) (32, 18)
          string_fragment (32, 18) (32, 25)
          ' (32, 25) (32, 26)
        , (32, 26) (32, 27)
        string (32, 28) (32, 36)
          ' (32, 28) (32, 29)
          string_fragment (32, 29) (32, 35)
          ' (32, 35) (32, 36)
        , (32, 36) (32, 37)
        string (32, 38) (32, 46)
          ' (32, 38) (32, 39)
          string_fragment (32, 39) (32, 45)
          ' (32, 45) (32, 46)
        ] (32, 46) (32, 47)
    ; (32, 47) (32, 48)
  comment (34, 0) (34, 16)
  lexical_declaration (35, 0) (35, 29)
    const (35, 0) (35, 5)
    variable_declarator (35, 6) (35, 28)
      object_pattern (35, 6) (35, 19)
        { (35, 6) (35, 7)
        shorthand_property_identifier_pattern (35, 8) (35, 12)
        , (35, 12) (35, 13)
        shorthand_property_identifier_pattern (35, 14) (35, 17)
        } (35, 18) (35, 19)
      = (35, 20) (35, 21)
      identifier (35, 22) (35, 28)
    ; (35, 28) (35, 29)
  expression_statement (36, 0) (36, 23)
    call_expression (36, 0) (36, 22)
      member_expression (36, 0) (36, 11)
        identifier (36, 0) (36, 7)
        . (36, 7) (36, 8)
        property_identifier (36, 8) (36, 11)
      arguments (36, 11) (36, 22)
        ( (36, 11) (36, 12)
        identifier (36, 12) (36, 16)
        , (36, 16) (36, 17)
        identifier (36, 18) (36, 21)
        ) (36, 21) (36, 22)
    ; (36, 22) (36, 23)
  comment (38, 0) (38, 26)
  function_declaration (39, 0) (41, 1)
    function (39, 0) (39, 8)
    identifier (39, 9) (39, 18)
    formal_parameters (39, 18) (39, 20)
      ( (39, 18) (39, 19)
      ) (39, 19) (39, 20)
    statement_block (39, 21) (41, 1)
      { (39, 21) (39, 22)
      return_statement (40, 4) (40, 86)
        return (40, 4) (40, 10)
        new_expression (40, 11) (40, 85)
          new (40, 11) (40, 14)
          identifier (40, 15) (40, 22)
          arguments (40, 22) (40, 85)
            ( (40, 22) (40, 23)
            arrow_function (40, 23) (40, 84)
              formal_parameters (40, 23) (40, 32)
                ( (40, 23) (40, 24)
                identifier (40, 24) (40, 31)
                ) (40, 31) (40, 32)
              => (40, 33) (40, 35)
              call_expression (40, 36) (40, 84)
                identifier (40, 36) (40, 46)
                arguments (40, 46) (40, 84)
                  ( (40, 46) (40, 47)
                  arrow_function (40, 47) (40, 77)
                    formal_parameters (40, 47) (40, 49)
                      ( (40, 47) (40, 48)
                      ) (40, 48) (40, 49)
                    => (40, 50) (40, 52)
                    call_expression (40, 53) (40, 77)
                      identifier (40, 53) (40, 60)
                      arguments (40, 60) (40, 77)
                        ( (40, 60) (40, 61)
                        string (40, 61) (40, 76)
                          ' (40, 61) (40, 62)
                          string_fragment (40, 62) (40, 75)
                          ' (40, 75) (40, 76)
                        ) (40, 76) (40, 77)
                  , (40, 77) (40, 78)
                  number (40, 79) (40, 83)
                  ) (40, 83) (40, 84)
            ) (40, 84) (40, 85)
        ; (40, 85) (40, 86)
      } (41, 0) (41, 1)
  function_declaration (43, 0) (47, 1)
    async (43, 0) (43, 5)
    function (43, 6) (43, 14)
    identifier (43, 15) (43, 24)
    formal_parameters (43, 24) (43, 26)
      ( (43, 24) (43, 25)
      ) (43, 25) (43, 26)
    statement_block (43, 27) (47, 1)
      { (43, 27) (43, 28)
      expression_statement (44, 4) (44, 40)
        call_expression (44, 4) (44, 39)
          member_expression (44, 4) (44, 15)
            identifier (44, 4) (44, 11)
            . (44, 11) (44, 12)
            property_identifier (44, 12) (44, 15)
          arguments (44, 15) (44, 39)
            ( (44, 15) (44, 16)
            string (44, 16) (44, 38)
              ' (44, 16) (44, 17)
              string_fragment (44, 17) (44, 37)
              ' (44, 37) (44, 38)
            ) (44, 38) (44, 39)
        ; (44, 39) (44, 40)
      lexical_declaration (45, 4) (45, 37)
        const (45, 4) (45, 9)
        variable_declarator (45, 10) (45, 36)
          identifier (45, 10) (45, 16)
          = (45, 17) (45, 18)
          await_expression (45, 19) (45, 36)
            await (45, 19) (45, 24)
            call_expression (45, 25) (45, 36)
              identifier (45, 25) (45, 34)
              arguments (45, 34) (45, 36)
                ( (45, 34) (45, 35)
                ) (45, 35) (45, 36)
        ; (45, 36) (45, 37)
      expression_statement (46, 4) (46, 24)
        call_expression (46, 4) (46, 23)
          member_expression (46, 4) (46, 15)
            identifier (46, 4) (46, 11)
            . (46, 11) (46, 12)
            property_identifier (46, 12) (46, 15)
          arguments (46, 15) (46, 23)
            ( (46, 15) (46, 16)
            identifier (46, 16) (46, 22)
            ) (46, 22) (46, 23)
        ; (46, 23) (46, 24)
      } (47, 0) (47, 1)
  expression_statement (49, 0) (49, 12)
    call_expression (49, 0) (49, 11)
      identifier (49, 0) (49, 9)
      arguments (49, 9) (49, 11)
        ( (49, 9) (49, 10)
        ) (49, 10) (49, 11)
    ; (49, 11) (49, 12)
  comment (51, 0) (51, 54)
  comment (52, 0) (52, 39)
  comment (53, 0) (53, 26)
  comment (54, 0) (54, 4)
  comment (55, 0) (55, 81)
  comment (57, 0) (57, 25)
  expression_statement (58, 0) (62, 3)
    call_expression (58, 0) (62, 2)
      member_expression (58, 0) (58, 25)
        identifier (58, 0) (58, 8)
        . (58, 8) (58, 9)
        property_identifier (58, 9) (58, 25)
      arguments (58, 25) (62, 2)
        ( (58, 25) (58, 26)
        string (58, 26) (58, 44)
          ' (58, 26) (58, 27)
          string_fragment (58, 27) (58, 43)
          ' (58, 43) (58, 44)
        , (58, 44) (58, 45)
        arrow_function (58, 46) (62, 1)
          formal_parameters (58, 46) (58, 48)
            ( (58, 46) (58, 47)
            ) (58, 47) (58, 48)
          => (58, 49) (58, 51)
          statement_block (58, 52) (62, 1)
            { (58, 52) (58, 53)
            lexical_declaration (59, 4) (59, 49)
              const (59, 4) (59, 9)
              variable_declarator (59, 10) (59, 48)
                identifier (59, 10) (59, 17)
                = (59, 18) (59, 19)
                call_expression (59, 20) (59, 48)
                  member_expression (59, 20) (59, 42)
                    identifier (59, 20) (59, 28)
                    . (59, 28) (59, 29)
                    property_identifier (59, 29) (59, 42)
                  arguments (59, 42) (59, 48)
                    ( (59, 42) (59, 43)
                    string (59, 43) (59, 47)
                      ' (59, 43) (59, 44)
                      string_fragment (59, 44) (59, 46)
                      ' (59, 46) (59, 47)
                    ) (59, 47) (59, 48)
              ; (59, 48) (59, 49)
            expression_statement (60, 4) (60, 48)
              assignment_expression (60, 4) (60, 47)
                member_expression (60, 4) (60, 23)
                  identifier (60, 4) (60, 11)
                  . (60, 11) (60, 12)
                  property_identifier (60, 12) (60, 23)
                = (60, 24) (60, 25)
                string (60, 26) (60, 47)
                  ' (60, 26) (60, 27)
                  string_fragment (60, 27) (60, 46)
                  ' (60, 46) (60, 47)
              ; (60, 47) (60, 48)
            expression_statement (61, 4) (61, 39)
              call_expression (61, 4) (61, 38)
                member_expression (61, 4) (61, 29)
                  member_expression (61, 4) (61, 17)
                    identifier (61, 4) (61, 12)
                    . (61, 12) (61, 13)
                    property_identifier (61, 13) (61, 17)
                  . (61, 17) (61, 18)
                  property_identifier (61, 18) (61, 29)
                arguments (61, 29) (61, 38)
                  ( (61, 29) (61, 30)
                  identifier (61, 30) (61, 37)
                  ) (61, 37) (61, 38)
              ; (61, 38) (61, 39)
            } (62, 0) (62, 1)
        ) (62, 1) (62, 2)
    ; (62, 2) (62, 3)
  comment (64, 0) (64, 17)
  try_statement (65, 0) (69, 1)
    try (65, 0) (65, 3)
    statement_block (65, 4) (67, 1)
      { (65, 4) (65, 5)
      expression_statement (66, 4) (66, 26)
        call_expression (66, 4) (66, 25)
          identifier (66, 4) (66, 23)
          arguments (66, 23) (66, 25)
            ( (66, 23) (66, 24)
            ) (66, 24) (66, 25)
        ; (66, 25) (66, 26)
      } (67, 0) (67, 1)
    catch_clause (67, 2) (69, 1)
      catch (67, 2) (67, 7)
      ( (67, 8) (67, 9)
      identifier (67, 9) (67, 14)
      ) (67, 14) (67, 15)
      statement_block (67, 16) (69, 1)
        { (67, 16) (67, 17)
        expression_statement (68, 4) (68, 53)
          call_expression (68, 4) (68, 52)
            member_expression (68, 4) (68, 17)
              identifier (68, 4) (68, 11)
              . (68, 11) (68, 12)
              property_identifier (68, 12) (68, 17)
            arguments (68, 17) (68, 52)
              ( (68, 17) (68, 18)
              string (68, 18) (68, 36)
                ' (68, 18) (68, 19)
                string_fragment (68, 19) (68, 35)
                ' (68, 35) (68, 36)
              , (68, 36) (68, 37)
              member_expression (68, 38) (68, 51)
                identifier (68, 38) (68, 43)
                . (68, 43) (68, 44)
                property_identifier (68, 44) (68, 51)
              ) (68, 51) (68, 52)
          ; (68, 52) (68, 53)
        } (69, 0) (69, 1)
  expression_statement (71, 0) (71, 41)
    call_expression (71, 0) (71, 40)
      member_expression (71, 0) (71, 11)
        identifier (71, 0) (71, 7)
        . (71, 7) (71, 8)
        property_identifier (71, 8) (71, 11)
      arguments (71, 11) (71, 40)
        ( (71, 11) (71, 12)
        call_expression (71, 12) (71, 39)
          identifier (71, 12) (71, 17)
          arguments (71, 17) (71, 39)
            ( (71, 17) (71, 18)
            string (71, 18) (71, 38)
              ' (71, 18) (71, 19)
              string_fragment (71, 19) (71, 37)
              ' (71, 37) (71, 38)
            ) (71, 38) (71, 39)
        ) (71, 39) (71, 40)
    ; (71, 40) (71, 41)
